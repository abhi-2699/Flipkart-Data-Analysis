{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ConnectFlipkartStorage",
						"type": "LinkedServiceReference"
					},
					"name": "LoadProducts"
				},
				{
					"linkedService": {
						"referenceName": "ConnectFlipkartStorage",
						"type": "LinkedServiceReference"
					},
					"name": "LoadSales"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ConnectFlipkartStorage",
						"type": "LinkedServiceReference"
					},
					"name": "DumpData"
				},
				{
					"linkedService": {
						"referenceName": "ConnectFlipkartStorage",
						"type": "LinkedServiceReference"
					},
					"name": "DumpMoreData"
				}
			],
			"transformations": [
				{
					"name": "RemoveID"
				},
				{
					"name": "AddSaleID"
				},
				{
					"name": "ColumnRename"
				},
				{
					"name": "FilterRegion"
				},
				{
					"name": "ReorderColumnNames"
				},
				{
					"name": "AddProductID"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {_col0_} as short,",
				"          {_col1_} as integer,",
				"          {_col2_} as string,",
				"          {_col3_} as string,",
				"          {_col4_} as string,",
				"          {_col5_} as string,",
				"          {_col6_} as string,",
				"          {_col7_} as string,",
				"          {_col8_} as string,",
				"          {_col9_} as string,",
				"          {_col10_} as short,",
				"          {_col11_} as short,",
				"          {_col12_} as short",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: '02-extracted',",
				"     fileName: 'products.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     skipLines: 1,",
				"     multiLineRow: true) ~> LoadProducts",
				"source(output(",
				"          {_col0_} as short,",
				"          {_col1_} as short,",
				"          {_col2_} as short,",
				"          {_col3_} as date,",
				"          {_col4_} as string,",
				"          {_col5_} as integer,",
				"          {_col6_} as integer,",
				"          {_col7_} as integer,",
				"          {_col8_} as short,",
				"          {_col9_} as double,",
				"          {_col10_} as double,",
				"          {_col11_} as integer,",
				"          {_col12_} as double",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: '02-extracted',",
				"     fileName: 'Sales.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     skipLines: 1) ~> LoadSales",
				"LoadSales select(mapColumn(",
				"          date = {_col3_},",
				"          city_name = {_col4_},",
				"          order_id = {_col5_},",
				"          cart_id = {_col6_},",
				"          dim_customer_key = {_col7_},",
				"          procured_quantity = {_col8_},",
				"          unit_selling_price = {_col9_},",
				"          total_discount_amount = {_col10_},",
				"          product_id = {_col11_},",
				"          total_weighted_landing_price = {_col12_}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveID",
				"FilterRegion keyGenerate(output(id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddSaleID",
				"LoadProducts select(mapColumn(",
				"          product_id = {_col1_},",
				"          product_name = {_col2_},",
				"          unit = {_col3_},",
				"          product_type = {_col4_},",
				"          brand_name = {_col5_},",
				"          manufacturer_name = {_col6_},",
				"          l0_category = {_col7_},",
				"          l1_category = {_col8_},",
				"          l2_category = {_col9_},",
				"          l0_category_id = {_col10_},",
				"          l1_category_id = {_col11_},",
				"          l2_category_id = {_col12_}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ColumnRename",
				"RemoveID filter(city_name == \"Delhi\") ~> FilterRegion",
				"AddSaleID select(mapColumn(",
				"          id,",
				"          date,",
				"          city_name,",
				"          order_id,",
				"          cart_id,",
				"          dim_customer_key,",
				"          procured_quantity,",
				"          unit_selling_price,",
				"          total_discount_amount,",
				"          product_id,",
				"          total_weighted_landing_price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ReorderColumnNames",
				"ColumnRename keyGenerate(output(id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddProductID",
				"AddProductID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: '03-cleaned',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DumpData",
				"ReorderColumnNames sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: '03-cleaned',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DumpMoreData"
			]
		}
	}
}